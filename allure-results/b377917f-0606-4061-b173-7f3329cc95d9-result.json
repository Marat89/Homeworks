{"name": "test_register_new_user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=102.0.5005.61)\nStacktrace:\n#0 0x5609daf62c33 <unknown>\n#1 0x5609dacac158 <unknown>\n#2 0x5609daca5f45 <unknown>\n#3 0x5609dac977a6 <unknown>\n#4 0x5609dac986bb <unknown>\n#5 0x5609dac97a72 <unknown>\n#6 0x5609dac96f15 <unknown>\n#7 0x5609dac95c0f <unknown>\n#8 0x5609dac96042 <unknown>\n#9 0x5609dacadbd2 <unknown>\n#10 0x5609dad13acf <unknown>\n#11 0x5609dad00032 <unknown>\n#12 0x5609dad13374 <unknown>\n#13 0x5609dacfff23 <unknown>\n#14 0x5609dacd58aa <unknown>\n#15 0x5609dacd6a05 <unknown>\n#16 0x5609dafa71ed <unknown>\n#17 0x5609dafab24e <unknown>\n#18 0x5609daf9148e <unknown>\n#19 0x5609dafabf88 <unknown>\n#20 0x5609daf86630 <unknown>\n#21 0x5609dafc8308 <unknown>\n#22 0x5609dafc8488 <unknown>\n#23 0x5609dafe283d <unknown>\n#24 0x7fb1aa3d9609 <unknown>", "trace": "browser = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x7fbfd1dd92e0>\nbase_url = 'http://192.168.72.130:8081/'\n\n    def test_register_new_user(browser, base_url):\n        \"\"\"Тест регистрации нового пользователя\n                   Шаги:\n                      1. Переход на старницу регистрации нового пользователя\n                      2. Заполнение обязательных полей\n                      3. Проверка регистрации пользователя\"\"\"\n>       browser.get(base_url)\n\nProject/tests/test_browser.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:85: in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url, ))\nvenv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:180: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:442: in get\n    self.execute(Command.GET, {'url': url})\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbfd1dd9e50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#22 0x5609dafc8488 \\\\u003Cunknown>\\\\n#23 0x5609dafe283d \\\\u003Cunknown>\\\\n#24 0x7fb1aa3d9609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=102.0.5005.61)\nE       Stacktrace:\nE       #0 0x5609daf62c33 <unknown>\nE       #1 0x5609dacac158 <unknown>\nE       #2 0x5609daca5f45 <unknown>\nE       #3 0x5609dac977a6 <unknown>\nE       #4 0x5609dac986bb <unknown>\nE       #5 0x5609dac97a72 <unknown>\nE       #6 0x5609dac96f15 <unknown>\nE       #7 0x5609dac95c0f <unknown>\nE       #8 0x5609dac96042 <unknown>\nE       #9 0x5609dacadbd2 <unknown>\nE       #10 0x5609dad13acf <unknown>\nE       #11 0x5609dad00032 <unknown>\nE       #12 0x5609dad13374 <unknown>\nE       #13 0x5609dacfff23 <unknown>\nE       #14 0x5609dacd58aa <unknown>\nE       #15 0x5609dacd6a05 <unknown>\nE       #16 0x5609dafa71ed <unknown>\nE       #17 0x5609dafab24e <unknown>\nE       #18 0x5609daf9148e <unknown>\nE       #19 0x5609dafabf88 <unknown>\nE       #20 0x5609daf86630 <unknown>\nE       #21 0x5609dafc8308 <unknown>\nE       #22 0x5609dafc8488 <unknown>\nE       #23 0x5609dafe283d <unknown>\nE       #24 0x7fb1aa3d9609 <unknown>\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException"}, "description": "Тест регистрации нового пользователя\n               Шаги:\n                  1. Переход на старницу регистрации нового пользователя\n                  2. Заполнение обязательных полей\n                  3. Проверка регистрации пользователя", "attachments": [{"name": "log", "source": "76e3666e-441a-4617-8436-5d7b922a2401-attachment.txt", "type": "text/plain"}], "start": 1656352134994, "stop": 1656352137036, "uuid": "26918735-7e22-4019-a4d6-60bbf232b92f", "historyId": "c4027a14c15273f70b94ea50b8f65c6b", "testCaseId": "08f224794ac6e0dd6b15d82e351af9d8", "fullName": "Project.tests.test_browser#test_register_new_user", "labels": [{"name": "parentSuite", "value": "Project.tests"}, {"name": "suite", "value": "test_browser"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "5891-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Project.tests.test_browser"}]}