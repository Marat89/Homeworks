{"name": "test_add_product", "status": "failed", "statusDetails": {"message": "AssertionError: Cant find element by locator: ('css selector', '[placeholder = \"Product Name\"]')", "trace": "self = <page_object.admin_page.AdminPage object at 0x7f16bb8b8d30>\nlocator = ('css selector', '[placeholder = \"Product Name\"]')\n\n    def _verify_element_presence(self, locator: tuple):\n        try:\n>           return WebDriverWait(self.browser, 1).until(EC.visibility_of_element_located(locator))\n\nPageObject/page_object/BasePage.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0398e01469b3852e20d3047c1a6c1eb1\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7f16bb892040>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:87: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x7f16bb8d2700>\nbase_url = 'http://192.168.72.130:8081/'\n\n    def test_add_product(browser, base_url):\n        browser.get(f\"{base_url}/admin\")\n        browser.maximize_window()\n        AutorizationAdminPage(browser).admin_autorization()\n        AdminPage(browser).create_product()\n        AdminPage(browser).fill_in_the_field()\n>       AdminPage(browser).checking_the_creation()\n\nPageObject/tests/test_browser.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObject/page_object/admin_page.py:40: in checking_the_creation\n    self._verify_element_presence(self.searh_name).send_keys(\"test_product1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page_object.admin_page.AdminPage object at 0x7f16bb8b8d30>\nlocator = ('css selector', '[placeholder = \"Product Name\"]')\n\n    def _verify_element_presence(self, locator: tuple):\n        try:\n            return WebDriverWait(self.browser, 1).until(EC.visibility_of_element_located(locator))\n    \n        except TimeoutException:\n>           raise AssertionError(\"Cant find element by locator: {}\".format(locator))\nE           AssertionError: Cant find element by locator: ('css selector', '[placeholder = \"Product Name\"]')\n\nPageObject/page_object/BasePage.py:23: AssertionError"}, "attachments": [{"name": "log", "source": "80228e71-be99-4012-b4fd-61d2103f4e1e-attachment.txt", "type": "text/plain"}], "start": 1656236841658, "stop": 1656236849113, "uuid": "06887dcb-d434-474d-abf2-a6ee8c9f953b", "historyId": "3710c6ec65c04f513c0e6290de127556", "testCaseId": "b27f072bdc0d0291dc2fe566ef198b82", "fullName": "tests.test_browser#test_add_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_browser"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "38867-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_browser"}]}