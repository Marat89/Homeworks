{"uid":"dffb722f1b5e4b6f","name":"test_phone_catalog","fullName":"Project.tests.test_browser#test_phone_catalog","historyId":"ff8418722f6daf24ca9c1c6be994719e","time":{"start":1656352108922,"stop":1656352111612,"duration":2690},"description":"Тест проверки элементов страницы каталога телефонов\n    1. Наличие основного контента\n    2. Кнопка преключения отображения контента\n    3. Карточка продукта\n    4. Предложение под навигационной панелью\n    5. Кнопка сортировки","descriptionHtml":"<p>Тест проверки элементов страницы каталога телефонов<br />\n1. Наличие основного контента<br />\n2. Кнопка преключения отображения контента<br />\n3. Карточка продукта<br />\n4. Предложение под навигационной панелью<br />\n5. Кнопка сортировки</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=102.0.5005.61)\nStacktrace:\n#0 0x55923ba71c33 <unknown>\n#1 0x55923b7bb158 <unknown>\n#2 0x55923b7b4f45 <unknown>\n#3 0x55923b7a67a6 <unknown>\n#4 0x55923b7a76bb <unknown>\n#5 0x55923b7a6a72 <unknown>\n#6 0x55923b7a5f15 <unknown>\n#7 0x55923b7a4c0f <unknown>\n#8 0x55923b7a5042 <unknown>\n#9 0x55923b7bcbd2 <unknown>\n#10 0x55923b822acf <unknown>\n#11 0x55923b80f032 <unknown>\n#12 0x55923b822374 <unknown>\n#13 0x55923b80ef23 <unknown>\n#14 0x55923b7e48aa <unknown>\n#15 0x55923b7e5a05 <unknown>\n#16 0x55923bab61ed <unknown>\n#17 0x55923baba24e <unknown>\n#18 0x55923baa048e <unknown>\n#19 0x55923babaf88 <unknown>\n#20 0x55923ba95630 <unknown>\n#21 0x55923bad7308 <unknown>\n#22 0x55923bad7488 <unknown>\n#23 0x55923baf183d <unknown>\n#24 0x7f44dfa9a609 <unknown>","statusTrace":"browser = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x7fbfd1efbc10>\nbase_url = 'http://192.168.72.130:8081/'\n\n    def test_phone_catalog(browser, base_url):\n        \"\"\"Тест проверки элементов страницы каталога телефонов\n        1. Наличие основного контента\n        2. Кнопка преключения отображения контента\n        3. Карточка продукта\n        4. Предложение под навигационной панелью\n        5. Кнопка сортировки\"\"\"\n    \n>       browser.get(f\"{base_url}/smartphone\")\n\nProject/tests/test_browser.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:85: in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url, ))\nvenv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:180: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:442: in get\n    self.execute(Command.GET, {'url': url})\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbfd1efbaf0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#22 0x55923bad7488 \\\\u003Cunknown>\\\\n#23 0x55923baf183d \\\\u003Cunknown>\\\\n#24 0x7f44dfa9a609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=102.0.5005.61)\nE       Stacktrace:\nE       #0 0x55923ba71c33 <unknown>\nE       #1 0x55923b7bb158 <unknown>\nE       #2 0x55923b7b4f45 <unknown>\nE       #3 0x55923b7a67a6 <unknown>\nE       #4 0x55923b7a76bb <unknown>\nE       #5 0x55923b7a6a72 <unknown>\nE       #6 0x55923b7a5f15 <unknown>\nE       #7 0x55923b7a4c0f <unknown>\nE       #8 0x55923b7a5042 <unknown>\nE       #9 0x55923b7bcbd2 <unknown>\nE       #10 0x55923b822acf <unknown>\nE       #11 0x55923b80f032 <unknown>\nE       #12 0x55923b822374 <unknown>\nE       #13 0x55923b80ef23 <unknown>\nE       #14 0x55923b7e48aa <unknown>\nE       #15 0x55923b7e5a05 <unknown>\nE       #16 0x55923bab61ed <unknown>\nE       #17 0x55923baba24e <unknown>\nE       #18 0x55923baa048e <unknown>\nE       #19 0x55923babaf88 <unknown>\nE       #20 0x55923ba95630 <unknown>\nE       #21 0x55923bad7308 <unknown>\nE       #22 0x55923bad7488 <unknown>\nE       #23 0x55923baf183d <unknown>\nE       #24 0x7f44dfa9a609 <unknown>\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1656352104339,"stop":1656352108898,"duration":4559},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"base_url","time":{"start":1656352108898,"stop":1656352108899,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Тест проверки элементов страницы каталога телефонов\n    1. Наличие основного контента\n    2. Кнопка преключения отображения контента\n    3. Карточка продукта\n    4. Предложение под навигационной панелью\n    5. Кнопка сортировки","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=102.0.5005.61)\nStacktrace:\n#0 0x55923ba71c33 <unknown>\n#1 0x55923b7bb158 <unknown>\n#2 0x55923b7b4f45 <unknown>\n#3 0x55923b7a67a6 <unknown>\n#4 0x55923b7a76bb <unknown>\n#5 0x55923b7a6a72 <unknown>\n#6 0x55923b7a5f15 <unknown>\n#7 0x55923b7a4c0f <unknown>\n#8 0x55923b7a5042 <unknown>\n#9 0x55923b7bcbd2 <unknown>\n#10 0x55923b822acf <unknown>\n#11 0x55923b80f032 <unknown>\n#12 0x55923b822374 <unknown>\n#13 0x55923b80ef23 <unknown>\n#14 0x55923b7e48aa <unknown>\n#15 0x55923b7e5a05 <unknown>\n#16 0x55923bab61ed <unknown>\n#17 0x55923baba24e <unknown>\n#18 0x55923baa048e <unknown>\n#19 0x55923babaf88 <unknown>\n#20 0x55923ba95630 <unknown>\n#21 0x55923bad7308 <unknown>\n#22 0x55923bad7488 <unknown>\n#23 0x55923baf183d <unknown>\n#24 0x7f44dfa9a609 <unknown>","statusTrace":"browser = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x7fbfd1efbc10>\nbase_url = 'http://192.168.72.130:8081/'\n\n    def test_phone_catalog(browser, base_url):\n        \"\"\"Тест проверки элементов страницы каталога телефонов\n        1. Наличие основного контента\n        2. Кнопка преключения отображения контента\n        3. Карточка продукта\n        4. Предложение под навигационной панелью\n        5. Кнопка сортировки\"\"\"\n    \n>       browser.get(f\"{base_url}/smartphone\")\n\nProject/tests/test_browser.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:85: in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url, ))\nvenv/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:180: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:442: in get\n    self.execute(Command.GET, {'url': url})\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbfd1efbaf0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#22 0x55923bad7488 \\\\u003Cunknown>\\\\n#23 0x55923baf183d \\\\u003Cunknown>\\\\n#24 0x7f44dfa9a609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=102.0.5005.61)\nE       Stacktrace:\nE       #0 0x55923ba71c33 <unknown>\nE       #1 0x55923b7bb158 <unknown>\nE       #2 0x55923b7b4f45 <unknown>\nE       #3 0x55923b7a67a6 <unknown>\nE       #4 0x55923b7a76bb <unknown>\nE       #5 0x55923b7a6a72 <unknown>\nE       #6 0x55923b7a5f15 <unknown>\nE       #7 0x55923b7a4c0f <unknown>\nE       #8 0x55923b7a5042 <unknown>\nE       #9 0x55923b7bcbd2 <unknown>\nE       #10 0x55923b822acf <unknown>\nE       #11 0x55923b80f032 <unknown>\nE       #12 0x55923b822374 <unknown>\nE       #13 0x55923b80ef23 <unknown>\nE       #14 0x55923b7e48aa <unknown>\nE       #15 0x55923b7e5a05 <unknown>\nE       #16 0x55923bab61ed <unknown>\nE       #17 0x55923baba24e <unknown>\nE       #18 0x55923baa048e <unknown>\nE       #19 0x55923babaf88 <unknown>\nE       #20 0x55923ba95630 <unknown>\nE       #21 0x55923bad7308 <unknown>\nE       #22 0x55923bad7488 <unknown>\nE       #23 0x55923baf183d <unknown>\nE       #24 0x7f44dfa9a609 <unknown>\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException","steps":[],"attachments":[{"uid":"ecaa2c2e4ef2e883","name":"log","source":"ecaa2c2e4ef2e883.txt","type":"text/plain","size":93}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"browser::fin","time":{"start":1656352112046,"stop":1656352112182,"duration":136},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Project.tests"},{"name":"suite","value":"test_browser"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"5891-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Project.tests.test_browser"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"dffb722f1b5e4b6f.json","parameterValues":[]}